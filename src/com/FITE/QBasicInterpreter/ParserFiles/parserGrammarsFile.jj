/**/options{  static = true;}/**/PARSER_BEGIN(parserGrammarsFile)package com.FITE.QBasicInterpreter.ParserFiles;/**/
import java.io.FileInputStream;import java.io.BufferedInputStream;import com.FITE.QBasicInterpreter.ParseTreeNodeTypes.AbstractNode;import com.FITE.QBasicInterpreter.ParseTreeNodeTypes.PrintNode;import com.FITE.QBasicInterpreter.ParseTreeNodeTypes.RootParseTreeNode;import com.FITE.QBasicInterpreter.ParseTreeNodeTypes.StringNode;import com.FITE.QBasicInterpreter.Tools.Context;/**/
public class parserGrammarsFile{  public static void main(String args []) throws Exception  {    FileInputStream file = new FileInputStream("QBasicCodeFile.txt");    BufferedInputStream stream = new BufferedInputStream(file);    parserGrammarsFile parser = new parserGrammarsFile(stream);    AbstractNode rootSyntaxTree = BeginParsing();    rootSyntaxTree.execute(new Context());  }}PARSER_END(parserGrammarsFile)/* SKIP CHARACTERS */SKIP :{  " " | "\r" | "\t" }/* OPERATORS */TOKEN : {  < PLUS : "+" >| < MINUS : "-" >| < MULTIPLY : "*" >| < DIVIDE : "/" >| < POWER : "^" >| < SINGLEQUOTATION : "\'">| < DOUBLEQUOTATION : "\"" >| < LP : "(" >| < RP : ")" >| < #DIGIT : [ "0"-"9" ] >| < #LETTER :  [ "a"-"z" ] | [ "A"-"Z" ] >| < NUMBER : (< DIGIT >)+ >| < STRING : <  DOUBLEQUOTATION > ((< LETTER >) | (< DIGIT >) )* <  DOUBLEQUOTATION >>| < EOS : "\n" >}/* TOKENS OF STATEMENT */TOKEN : {  < PRINT : "PRINT" >}
/**/RootParseTreeNode BeginParsing() :{  RootParseTreeNode rootParseTreeNode = new RootParseTreeNode();  AbstractNode childNode = null;}{  (    childNode = StatementGrammar(){      rootParseTreeNode.addChildToNode(childNode);    }  )+  {    return rootParseTreeNode;  }}/**/AbstractNode StatementGrammar() :{  AbstractNode abstractNode = null;}{  abstractNode = PrintGrammar() {    if(abstractNode == null)    	abstractNode = new RootParseTreeNode();    return abstractNode;  }}/**/PrintNode PrintGrammar() :{  PrintNode printNode = new PrintNode();  AbstractNode childNode = null;}{  < PRINT > childNode = StringGrammar() < EOS >  {    printNode.addChildToNode(childNode);    return printNode;  }}/**/StringNode StringGrammar():{  Token t;}{  t  = < STRING >  {    return new StringNode(t.image);  }}/**/ExpressionNode E() :{  ExpressionNode excpressionNode = new ExpressionNode();  ExpressionNode firstOperator = null;  ExpressionNode secondOperator = null;  Token token = new Token();}{  node1 = F()  (    token = (< PLUS > | < MINUS >) node2 = E()  )?  {    excpressionNode.setOperation(token.image);    excpressionNode.addChild(node1);    if (node2 != null)    {      excpressionNode.addChild(node2);      return excpressionNode;    }    else     return node1;  }}ExpressionNode F() :{  ExpressionNode fNode = new ExpressionNode();  ExpressionNode node1;  ExpressionNode node2 = null;  Token t = new Token();}{  node1 = Exp()  (    t = < MULTIPLY > node2 = F()  )?  {    fnode.setOperation(t.image);    fnode.addChild(node1);    if (node2 != null)    {      fnode.addChild(node2);      return fnode;    }    else     return node1;  }}ExpressionNode Exp() :{  ExpressionNode expnode = new ExpressionNode();  ExpressionNode node1;  ExpressionNode node2 = null;  Token t = new Token();}{  node1 = N()  (    t = < POWER > node2 = Exp()  )?  {    expnode.setOperation(t.image);    expnode.addChild(node1);    if (node2 != null)    {      expnode.addChild(node2);      return expnode;    }    else     return node1;  }}ExpressionNode N() :{  ExpressionNode enode = new ExpressionNode();  ExpressionNode node1 = null;  ConstantNode conNode = null;  VariableNode varNode = null;  Token t = new Token();}{  (    LOOKAHEAD(2)    node1 = CAllFUNCTION()  |     t = < DOUBLE >    {      conNode = new ConstantNode();      conNode.setValue(t.image);    }  |     t = < VAR >    {      varNode = new VariableNode();      varNode.setVarId(t.image);    }  |     t = < NUM >    {      conNode = new ConstantNode();      conNode.setValue(t.image);    }  |    < LP > node1 = E() < RP >  )  {    if (node1 != null)    {      return node1;    }    else     if (varNode != null)     return varNode;    else     return conNode;  }}