/**/options{  static = true;}/**/PARSER_BEGIN(parserGrammarsFile)package com.FITE.QBasicInterpreter.ParserFiles;/**/
import java.io.FileInputStream;import java.io.BufferedInputStream;import com.*;/**/
public class parserGrammarsFile{  public static void main(String args []) throws Exception  {    FileInputStream file = new FileInputStream("QBasicCodeFile.txt");    BufferedInputStream stream = new BufferedInputStream(file);    parserGrammarsFile parser = new parserGrammarsFile(stream);    AbstractNode rootSyntaxTree = BeginParsing();    rootSyntaxTree.execute(new Context());  }}PARSER_END(parserGrammarsFile)/**/SKIP :{  " "| "\r"| "\t"| "\n"}/**/TOKEN : /* OPERATORS */{  < PLUS : "+" >| < MINUS : "-" >| < MULTIPLY : "*" >| < DIVIDE : "/" >}/**/TOKEN :{  < PRINT : "PRINT" >  < #STRING : [ "a"-"z" ] | [ "A"-"Z" ] >
}
/**/AbstractNode BeginParsing() :{}{}/**/AbstractTreeNode Statement() :{  AbstractNode node = null;}{  node = PrintNode() {    if(node == null)    	node = new BlockNode();    return node;  }}/**/PrintNode Print() :{  PrintNode printNode = new PrintNode();  ExpressionNode expressionNode;}{  < PRINT > ( expressionNode = String() )  {    printNode.addChild(expressionNode);    return printNode;  }}/**/StringNode String():{  Token t;}{	t  = < STRING >  {    return new StringNode(t.image);  }}/**/